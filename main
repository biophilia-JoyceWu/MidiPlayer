#include "beep.h"
#include "delay.h"
#include "rgb.h"
#include "adc.h"
#include "timer.h"
#include "digital.h"
#include "math.h"
#include "usart.h"

#define SYSTEM_OSC 		72000000	//定义晶振频率72000000HZ
#define SOUND_SPACE 	4/5 		//定义普通音符演奏的长度分率,//每4分音符间隔
#define PSC 7 //预分频

#define SONG1 0x10
#define SONG2 0x20
#define PLAY 0x01
#define PAUSE 0x02
#define MUSIC_STOP 0x03
#define MEASURE 0x30
#define STOP_MEASURE 0x31

#define TIME_START 0x40
#define TIME_STOP 0x41
#define TIME_RESET 0x42
u16 m_delay=0;
u16 maxfre(u16 *fre,u8 n);
u16 minfre(u16 *fre,u8 n);

void init(void){
	uart_init(9600);//串口初始化为9600
	delay_init();  //延时函数初始化
	BEEP_Init();
	RGB_Init();
	Adc_Init();
	LEDB=1;
	LEDR=0;
	TIM4_Int_Init(999,PSC);
}

int main(void)
{
	u16 p,q=0,msec=9999; // msec为最大值
	u16 flag=0;
	u8 i,j,rx;
	u8 song=0,song_rx=0,num=3;
	u8 play=0,replay=0,measure=0,time_start=0,play_mode=0,play_s=0;
	u16 MaxFre,MinFre;
	u16 *Sound;u16 Signature;u16 Octachord;u16 Speed;
	u16 FreTab[12]  = { 262,277,294,311,330,349,369,392,415,440,466,494 }; //原始频率表
	u16 SignTab[7]  = { 0,2,4,5,7,9,11 }; 								  //1~7在频率表中的位
	u16 LengthTab[7]= { 1,2,4,8,16,32,64 };	//音符类型					
	u16 NewFreTab[12];		//新的频率表
	int len=0;
	u16 Point,LDiv,LDiv0,LDiv1,LDiv2=0,LDiv4,CurrentFre,Temp_T,SoundLength,ledpwm;
	u8 Tone,Length,SL,SH,SM,SLen,XG,FD;
	u16 adcx;
	u16 gaoyuan[]={0x10,0x00, 0x10,0x03, 0x17,0x0E, 0x16,0x04, 0x16,0x01,
                                  0x16,0x03, 0x15,0x03, 0x15,0x03, 0x16,0x03, 0x17,0x02,
                                  0x17,0x02, 0x19,0x67, 0x17,0x04, 0x19,0x04, 0x1A,0x04,
                                  0x1F,0x04, 0x20,0x04, 0x21,0x02, 0x21,0x03, 0x23,0x03,
                                  0x20,0x03, 0x1F,0x03, 0x23,0x00, 0x1A,0x00, 0x00,0x00 };
	
	
	u16 cityinsky[]={0x1A,0x0D, 0x1B,0x03, 0x1F,0x70, 0x1B,0x03, 0x1F,0x02,
                                  0x21,0x02, 0x1B,0x00, 0x17,0x03, 0x17,0x03, 0x1A,0x70,
                                  0x19,0x03, 0x1A,0x02, 0x1F,0x02, 0x19,0x15, 0x17,0x03,
                                  0x17,0x03, 0x18,0x70, 0x17,0x03, 0x18,0x0D, 0x1F,0x66,
                                  0x17,0x15, 0x1F,0x03, 0x1F,0x03, 0x1F,0x03, 0x1B,0xCA,
                                  0x18,0x67, 0x18,0x0C, 0x1B,0x02, 0x1B,0x15, 0x1A,0x03,
                                  0x1B,0x03, 0x1F,0x66, 0x1B,0x03, 0x1F,0x02, 0x21,0x02,
                                  0x1B,0x15, 0x17,0x03, 0x17,0x03, 0x1A,0x66, 0x19,0x03,
                                  0x1A,0x02, 0x1F,0x02, 0x19,0x14, 0x17,0x03, 0x18,0x02,
                                  0x1F,0x03, 0x1B,0x03, 0x1B,0x02, 0x1F,0x02, 0x20,0x03,
                                  0x20,0x03, 0x21,0x03, 0x1F,0x16, 0x1F,0x0C, 0x1B,0x03,
                                  0x1A,0x03, 0x1A,0x03, 0x1B,0x66, 0x19,0x02, 0x1A,0x02,
                                  0x00,0x00};
	init();

	//主循环
	while(1)
	{
		if(USART_RX_STA&0x8000)
		{					   
			//判断是否播放新歌曲
			rx=USART_RX_BUF[0];
			
			if(rx==SONG2+1)	 //选中第二首歌“SONG2+Play”
			{	
				song_rx=2;
				rx=rx-SONG2;
				if(!time_start)
				{	msec=32;num=2;}	  //【疑问】自定义？
			}
			if(rx==SONG1+1)
			{
				song_rx=1;
				rx=rx-SONG1;
				if(!time_start)
				{	msec=42;num=2;}
			}

			if(rx==PLAY) //0x01 播放
			{
				play=1;
			}

			if(rx==PAUSE)
			{
				play=0;
				flag=0;
				LEDR=0;
//				LEDB=1;
				TIM_Cmd(TIM2, DISABLE);
				BEEP=0;
				TIM_Cmd(TIM3, DISABLE);
			}

			if(rx==MUSIC_STOP)
			{
				song_rx=0;
				msec=0;
				countt=0;
				num=1;
//				LEDB=1;
				TIM_Cmd(TIM2, DISABLE);
				BEEP=0;
				TIM_Cmd(TIM3, DISABLE);
			}

			if(rx==MEASURE)
			{
				measure=1;
				countm=0;
			}
			if(rx==STOP_MEASURE)
				measure=0;
			//if(rx==TIME_START)
			if(rx==TIME_START)
			{
				time_start=1;
				num=1;
				msec=0;
				countt=0;
			}
			if(rx==TIME_STOP)
				time_start=2;
			if(rx==TIME_RESET)
			{	
				msec=0;
				countt=0;
				time_start=0;
				num=1;
			}			
			USART_RX_STA=0;
		}
		
		if(song_rx!=song)  //song=0
		{
			if(song_rx!=0)
			{	
				if(song_rx==1)
				{
					Sound=gaoyuan;
					Signature=0;
					Octachord=3;
					Speed=40;

				}
				if(song_rx==2)
				{
					Sound=cityinsky;
					Signature=0;
					Octachord=2;
					Speed=40;

				} 
				for(i=0;i<12;i++) 				// 根据调号及升降八度来生成新的频率表 
				{
					j = i + Signature;
					if(j > 11)
					{
						j = j-12;
						NewFreTab[i] = FreTab[j]*2;
					}
					else
						NewFreTab[i] = FreTab[j];
			
					if(Octachord == 1)
						NewFreTab[i]>>=1;
					else if(Octachord == 3)
						NewFreTab[i]<<=1;
				}										
				MaxFre=maxfre(NewFreTab,12)<<1;	   //【疑问】
				MinFre=minfre(NewFreTab,12)>>1;
				SoundLength = 0;
				while(Sound[SoundLength] != 0x00)	//计算歌曲长度
				{
					SoundLength+=2;
				}	
				Point = 0;
				LDiv0 = 60000/Speed;				// 算出1分音符的长度(几个10ms)  为什么不是12000	
				LDiv4 = LDiv0/4; 					// 算出4分音符的长度 
				LDiv4 = LDiv4-LDiv4*SOUND_SPACE; 	// 普通音最长间隔标准
				m_delay=0;
			}
			else
				LEDR=1;LEDB=1; 
			song=song_rx;
		}
		if(song!=0&&m_delay==0&&play_mode==0)
		{
			BEEP=0;
			if(play==1)
			{
				if(!replay&&LDiv2!=0)
				{
					BEEP=0;
					len+=LDiv2;
					TIM2_Int_Init(65535,287);
					m_delay=LDiv2;
					LDiv2=0;			
				}
				if(replay==1)
				{
					Point=0;
					if(song==1)
					{msec=42;num=2;}  //【疑问】
					else
					{msec=32;num=2;}
					replay=0;
				}
				if(m_delay==0)
				{			
					if(Point < SoundLength)
					{
						BEEP=0;	
						Tone=Sound[Point];
						Length=Sound[Point+1];
						Point+=2; 
						SL=Tone%10; 								//计算出音符 
						SM=Tone/10%10; 								//计算出高低音 
						SH=Tone/100; 								//计算出是否升半 
						CurrentFre = NewFreTab[SignTab[SL-1]+SH]; 	//查出对应音符的频率 
						if(SL!=0)
						{
							if (SM==1) CurrentFre >>= 1; 		//低音 
							if (SM==3) CurrentFre <<= 1; 		//高音
							Temp_T = 499999/CurrentFre;//计算计数器初值
							LEDB=1;
					        LEDR=0;
							ledpwm=(u16)(1000*((float)(CurrentFre-MinFre)/(float)(MaxFre-MinFre)));//PWM比较值 控制蓝色灯光占空比
							TIM3_Int_Init(1000,ledpwm,PSC);
							TIM2_Int_Init(Temp_T,PSC);
					
						}
						SLen=LengthTab[Length%10]; 	//算出是几分音符
						XG=Length/10%10; 			//算出音符类型(0普通1连音2顿音) 
						FD=Length/100;
						LDiv=LDiv0/SLen; 			//算出连音音符演奏的长度(多少个10ms)
						if (FD==1) 
							LDiv=LDiv+LDiv/2;
						if(XG!=1)	
							if(XG==0) 				//算出普通音符的演奏长度 
								if (SLen<=4)	
									LDiv1=LDiv-LDiv4;
								else
									LDiv1=LDiv*SOUND_SPACE;
							else
								LDiv1=LDiv/2; 		//算出顿音的演奏长度 
						else
							LDiv1=LDiv;
						if(SL==0) LDiv1=0;
							LDiv2=LDiv-LDiv1; 		//算出不发音的长度 
					  	if (SL!=0)
						{
							m_delay=LDiv1;
							len=len+LDiv1;	
						}
					}
					else
					{
						Point=0;
						play=0;
						msec=len/1000;
						//控制计时
						if(!time_start)
						{	if(song_rx==1) 
							{msec=42;num=2;}
							if(song_rx==2) 
							{msec=32;num=2;}
						} 
					}
				}
			
			}
		}

			if(flag==1)
			{
				if(play_s!=0)
				{
					CurrentFre=FreTab[play_s-1];			
					Temp_T = 499999/CurrentFre;//计算计数器初值
					LEDB=1;
					LEDR=0;
					ledpwm=(u16)(1000*((float)(CurrentFre-MinFre)/(float)(MaxFre-MinFre)));
					TIM3_Int_Init(1000,ledpwm,PSC);
					TIM2_Int_Init(Temp_T,PSC);
					flag=0;
				}
				else
				{BEEP=0;TIM_Cmd(TIM2, DISABLE);flag=0;}
			}
		

		//温度采样
		if(countm>=200&&measure==1)
		{
			adcx=Get_Adc(ADC_Channel_9);
			USART_SendData(USART1, adcx/256);//向串口1发送数据
			while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);//等待发送结束
			USART_SendData(USART1, adcx%256);//向串口1发送数据
			while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);//等待发送结束
			countm=0;
		}

		//数码管显示
		if(countt!=q)
			{
			if(msec>9999) //超出计数范围
			{
				msec=0;
				num=1;
			}
			if(time_start==1)//开始计时
			{
				if(countt>=1000)  //以秒为步进单位计时
				{	msec++;countt=0;}
				if(msec==pow(10,num)) 
					num++;
			}
			else
			{
				if(msec==0)
					num=1;
					else
					{
						if(msec>0&&countt>=1000)
						{	
							msec--;
							countt=0;
							if(play==0) msec++;
						} 
						if(num>1&&msec==pow(10,num-1)-1) 
							num--;
					}
			}

			p=countt%num;
	
			if(p==0)
			{	
				ShowData(msec,0,time_start);
				DIG1=0;DIG2=1;DIG3=1;DIG4=1;				
			}
			if(p==1)
			{	
				ShowData(msec,1,time_start);
				DIG1=1;DIG2=0;DIG3=1;DIG4=1;										
			}
			if(p==2)
			{	 
				ShowData(msec,2,time_start);
				DIG1=1;DIG2=1;DIG3=0;DIG4=1;
				
			}
			if(p==3)
			{	
				ShowData(msec,3,time_start);
				DIG1=1;DIG2=1;DIG3=1;DIG4=0;			
			}
			q=countt;
		}
			
	}
}


u16 maxfre(u16 *fre,u8 n)
{
	u8 i;
	u16 max;
	max=fre[0];
	for(i=1;i<n;i++)
	{
		if(max<fre[i])
		 	max=fre[i];
	}
	return max;	
}

u16 minfre(u16 *fre,u8 n)
{
	u8 i;
	u16 min;
	min=fre[0];
	for(i=1;i<n;i++)
	{
		if(min>fre[i])
		 	min=fre[i];
	}
	return min;	
}
